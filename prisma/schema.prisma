// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  balances     Balance[]
  transactions  Transaction[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  icon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?

  transactions Transaction[]

}

model Balance {
  id        String   @id @default(cuid())
  name      String
  amount    Float
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  transactions Transaction[]
} 

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String?
  date        DateTime @default(now())
  type        String   // e.g., "income", "expense"
  categoryId  String?
  balanceId   String?
  userId      String?

  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  balance     Balance? @relation(fields: [balanceId], references: [id], onDelete: Cascade)
  user        User? @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}